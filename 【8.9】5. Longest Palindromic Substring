//求最大回文子串
//定义一个二维数组都为false，当为true时代表着两下标之间是回文子串。分三种情况，一个字符也是回文子串，两个字符相同时也为回文子串，三个字符开始细致比较。
class Solution {
public:
    string longestPalindrome(string s) {
        	int location;//存放起始位置;
	int result;//存放位数;
	int len = s.length();
	int state[1000][1000] = { false };
	//每个字母都是一个回文结构
	for (int i = 0; i < len; i++)
	{
		state[i][i] = true;
		location = i;
		result = 1;
	}
	//两个字母为回文结构
	for (int i = 0; i < len - 1; i++)
		if (s[i] == s[i + 1]){
			state[i][i + 1] = true;
			location = i;
			result = 2;
		}
	//找到三个字母以上的回文结构
	for (int j = 3; j <= len; j++)
		for (int m = 0; m < len - j + 1; m++)
		{
			if ((s[m] == s[m + j - 1]) && (state[m + 1][m + j - 2] == true))
			{
				state[m][m + j - 1] = true;
				location = m;
				result = j;
			}
		}
	return s.substr(location, result);
    }
};
